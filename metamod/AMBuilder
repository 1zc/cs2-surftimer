# vim: set sts=2 ts=8 sw=2 tw=99 et ft=python: 
import os

# Here only one sdk should be available to generate only one executable in the end,
# as multi-sdk loading isn't supported out of the box by metamod, and would require specifying the full path in the vdf
# which in the end would ruin the multi-platform (unix, win etc) loading by metamod as it won't be able to append platform specific extension
# so just fall back to the single binary.
# Multi-sdk solutions should be manually loaded with a custom plugin loader (examples being sourcemod, stripper:source)
for sdk_name in MMSPlugin.sdks:
  for cxx in MMSPlugin.all_targets:
    sdk = MMSPlugin.sdks[sdk_name]

    if not cxx.target.arch in sdk.platformSpec[cxx.target.platform]:
      continue

    binary = MMSPlugin.HL2Library(builder, cxx, MMSPlugin.plugin_name, sdk)

    if binary.compiler.family == 'gcc' or binary.compiler.family == 'clang':
      binary.compiler.cxxflags += ['--std=c++17']
    elif binary.compiler.family == 'msvc':
      binary.compiler.cxxflags += ['/std:c++20']

    if binary.compiler.family == 'clang':
      binary.compiler.cxxflags += ['-Wno-register']

    binary.compiler.cxxincludes += [
      os.path.join(builder.sourcePath, 'vendor', 'funchook', 'include'),
    ]

    if binary.compiler.target.platform == 'linux':
      binary.compiler.postlink += [
        os.path.join(builder.sourcePath, 'vendor', 'funchook', 'lib', 'libfunchook.a'),
        os.path.join(builder.sourcePath, 'vendor', 'funchook', 'lib', 'libdistorm.a'),
      ]
    elif binary.compiler.target.platform == 'windows':
      binary.compiler.postlink += [
        os.path.join('psapi.lib'),
        os.path.join(builder.sourcePath, 'vendor', 'funchook', 'lib', 'funchook.lib'),
        os.path.join(builder.sourcePath, 'vendor', 'funchook', 'lib', 'distorm.lib'),
        os.path.join(builder.sourcePath, 'hl2sdk', 'lib', 'public', 'win64', 'steam_api64.lib')
      ]

    binary.sources += [
      'src/wst.cpp',
      'src/script_or_zone_file.cpp',
      'src/autoupdater.cpp',
      'src/core/schemasystem.cpp',
      'src/core/whereami.cpp',
    ]

    if sdk_name in ['dota', 'cs2']:
      binary.sources += [
        os.path.join(sdk.path, 'public', 'tier0', 'memoverride.cpp'),
        os.path.join(sdk.path, 'tier1', 'convar.cpp')
      ]


    if cxx.target.arch == 'x86':
      binary.sources += ['sourcehook/sourcehook_hookmangen.cpp']
    nodes = builder.Add(binary)
    MMSPlugin.binaries += [nodes]
    
  break
